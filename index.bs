<pre class="metadata">
Title: Proximity Sensor
Level: 1
Status: WD
ED: https://w3c.github.io/proximity/
TR: https://www.w3.org/TR/proximity/
Shortname: proximity
Previous Version: https://www.w3.org/TR/2015/WD-proximity-20150903/
Editor: Anssi Kostiainen 41974, Intel Corporation, https://intel.com/
Editor: Rijubrata Bhaumik 80407, Intel Corporation, https://intel.com/
Former Editor: Dzung D Tran, Intel Corporation, https://intel.com/
Group: dap
Abstract:
  This specification defines a concrete sensor interface to monitor
  the presence of nearby objects without physical contact.
Version History: https://github.com/w3c/proximity/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/proximity/issues/new">via the w3c/proximity repository on GitHub</a>
Indent: 2
Repository: w3c/proximity
Markup Shorthands: markdown on
Inline Github Issues: true
!Issue Tracking: <a href="https://github.com/w3c/proximity/issues">Issues</a>
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/proximity">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/permissions/; spec: PERMISSIONS
  type: dfn
    text: permission; url: idl-def-Permission
    text: associated PermissionDescriptor;  url: dfn-associated-permissiondescriptor
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor subclass
    text: sensorreading subclass
    text: default sensor
    text: supported reporting mode; url: supported-reporting-modes
    text: auto
    text: construct a sensor object; url: construct-sensor-object
</pre>

Introduction {#intro}
============

The Proximity Sensor extends the Generic Sensor API [[GENERIC-SENSOR]]
to provide information about proximity level, as detected by the device's primary
proximity sensor. The proximity level is reported as the distance (in centimeter)
from the sensor to the closest visible surface. [[#limitations-proximity-sensors]]
describes more about the potential limitations, why the precise distance value
reported by different devices can be different, due to differences in detection
method, sensor construction, etc.  Moreover some proximity sensors might be only
able to provide just a boolean to indicate if there is an object which is near,
more like presence detection, than an absolute value for the distance.


Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new ProximitySensor();
    sensor.start();

    sensor.onchange = event => console.log(event.reading.distance);

    sensor.onerror = function(event) {
        console.log(event.error.name, event.error.message);
    };
    </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The Proximity Sensor's associated <a>Sensor subclass</a>
is the {{ProximitySensor}} class.

The Proximity Sensor's associated <a>SensorReading subclass</a>
is the {{ProximitySensorReading}} class.

The Proximity Sensor has a <a>default sensor</a>,
which is the device's main proximity detector.

The Proximity Sensor has a single <a>supported reporting mode</a>
which is "<a>auto</a>".

The Proximity Sensor's <a>permission</a> name is `"proximity"`.
It has no <a>associated PermissionDescriptor</a>.

The Proximity Sensor has an associated abstract operation
to <dfn>retrieve the sensor permission</dfn> which
must simply return a <a>permission</a> whose name is "proximity".

The Proximity Sensor has an associated abstract operation
to <dfn lt="Construct SensorReading Object">construct a SensorReading object</dfn>
which creates a new {{ProximitySensorReading}} object and sets its
<a attribute for="ProximitySensorReading">distance</a> attribute to
positive infinity.

<dfn>Distance</dfn> is a value that represents the distance between a device and
the closest visible surface. Its unit is the centimeter (cm).

API {#api}
===

The ProximitySensor Interface {#proximity-sensor-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SensorOptions sensorOptions)]
  interface ProximitySensor : Sensor {
    readonly attribute ProximitySensorReading? reading;
  };
</pre>

To <dfn>Construct a ProximitySensor Object</dfn> the user agent must invoke the
<a>construct a Sensor object</a> abstract operation.

The ProximitySensorReading Interface {#proximity-sensor-reading-interface}
---------------------------------------

<pre class="idl">
  [Constructor(ProximitySensorReadingInit proximitySensorReadingInit)]
  interface ProximitySensorReading : SensorReading {
      readonly attribute unrestricted double distance;
      readonly attribute unrestricted double max;
      readonly attribute boolean? near;
  };

  dictionary ProximitySensorReadingInit {
    unrestricted double distance = Infinity;
    unrestricted double max = Infinity;
    boolean? near;
  };
</pre>

### The ProximitySensorReading constructor ### {#proximity-sensor-reading-constructor}

### The distance attribute ### {#proximity-sensor-reading-attribute-distance}

The <a attribute for="ProximitySensorReading">distance</a> attribute of the {{ProximitySensorReading}}
interface represents the distance between the sensor and the closest visible surface, in centimeters.

### The max attribute ### {#proximity-sensor-reading-attribute-max}

The <a attribute for="ProximitySensorReading">max</a> attribute of the {{ProximitySensorReading}}
interface represents the maximum sensing range for the primary proximity sensor, in centimeters.

### The near attribute ### {#proximity-sensor-reading-attribute-near}

The <a attribute for="ProximitySensorReading">near</a> attribute of the {{ProximitySensorReading}}
interface represents the the presence of a visible surface in the vicinity of the primary proximity sensor, in centimeters.


Note: If the implementation is unable to provide the {{near}} value, it could infer the {{near}} value from the value of {{distance}}.
For example, if {{distance}} is not equal to {{max}} or default value (Infinity),
it could imply there is an object in the sensing range.


Limitations of Proximity Sensors {#limitations-proximity-sensors}
========================

Since most proximity sensors detect electromagnetic radiation (e.g., an infrared light
or a magnetic field), certain material properties can interfere with the sensor's
ability to sense the presence of a physical object. Things that can interfere with
a sensor include, but are not limited to, the material's translucency, reflectiveness,
color, temperature, chemical composition, and even the angle at which the object
is reflecting the radiation back at the sensor. As such, proximity sensors
should not be relied on as a means to measure distance. The only thing that can
be deduced from a proximity sensor is that an object is somewhere in the
distance between the minimum sensing distance and the maximum sensing distance
with some degree of certainty.


Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API and inputs on this specification.
Doug Turner for the initial prototype and
Marcos Caceres for the test suite.

<h2 id="conformance" class="no-ref no-num">Conformance</h2>

 <h3 id="conventions" class="no-ref no-num">Document conventions</h3>

     <p>Conformance requirements are expressed with a combination of
     descriptive assertions and RFC 2119 terminology. The key words "MUST",
     "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
     "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
     document are to be interpreted as described in RFC 2119.
     However, for readability, these words do not appear in all uppercase
     letters in this specification.

     <p>All of the text of this specification is normative except sections
     explicitly marked as non-normative, examples, and notes. [[!RFC2119]]</p>

 <h3 id="conformance-classes" class="no-ref no-num">Conformance Classes</h3>

     <p>A <dfn>conformant user agent</dfn> must implement all the requirements
     listed in this specification that are applicable to user agents.</p>
